-- phpMyAdmin SQL Dump
-- version 5.0.4
-- https://www.phpmyadmin.net/
--
-- Хост: 127.0.0.1:3306
-- Время создания: Июн 11 2021 г., 21:21
-- Версия сервера: 8.0.19
-- Версия PHP: 7.1.33

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- База данных: `webnews`
--

-- --------------------------------------------------------

--
-- Структура таблицы `categories`
--

CREATE TABLE `categories` (
  `name` varchar(100) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Table with news'' categories';

--
-- Дамп данных таблицы `categories`
--

INSERT INTO `categories` (`name`) VALUES
('Классика'),
('Новинка'),
('Новичкам'),
('Обучение'),
('Практика'),
('Работа'),
('Стажировка');

-- --------------------------------------------------------

--
-- Структура таблицы `categorized_news`
--

CREATE TABLE `categorized_news` (
  `news_id` int NOT NULL,
  `cat_name` varchar(100) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Table with association of news and categories';

--
-- Дамп данных таблицы `categorized_news`
--

INSERT INTO `categorized_news` (`news_id`, `cat_name`) VALUES
(1, 'Классика'),
(2, 'Новинка'),
(3, 'Новинка'),
(4, 'Новинка'),
(5, 'Новинка'),
(6, 'Новинка'),
(7, 'Новинка'),
(1, 'Новичкам'),
(8, 'Новичкам'),
(9, 'Новичкам'),
(2, 'Обучение'),
(3, 'Обучение'),
(4, 'Обучение'),
(5, 'Обучение'),
(6, 'Обучение'),
(7, 'Обучение'),
(8, 'Обучение'),
(9, 'Обучение'),
(4, 'Практика'),
(5, 'Практика'),
(6, 'Практика'),
(8, 'Практика'),
(2, 'Работа'),
(5, 'Работа'),
(7, 'Работа'),
(9, 'Работа');

-- --------------------------------------------------------

--
-- Структура таблицы `groups`
--

CREATE TABLE `groups` (
  `name` varchar(100) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Table with news'' groups';

--
-- Дамп данных таблицы `groups`
--

INSERT INTO `groups` (`name`) VALUES
('html'),
('javascript'),
('php'),
('ruby'),
('typescript');

-- --------------------------------------------------------

--
-- Структура таблицы `news`
--

CREATE TABLE `news` (
  `id` int NOT NULL,
  `title` varchar(255) NOT NULL,
  `text` varchar(8000) NOT NULL,
  `post_date` timestamp NOT NULL,
  `group_name` varchar(100) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Table with news and their description';

--
-- Дамп данных таблицы `news`
--

INSERT INTO `news` (`id`, `title`, `text`, `post_date`, `group_name`) VALUES
(1, 'Используйте ссылки и кнопки правильно. Пожалуйста', 'При вёрстке макета не всегда понятно, что перед нами — кнопка или ссылка. Внешне эти элементы могут быть очень похожи, но их функции различаются и браузер реагирует на них по-разному. Поэтому неправильный выбор может привести к ошибкам в работе сайта. Рассказываю, как больше никогда не ошибаться в выборе.', '2021-06-08 12:17:54', 'html'),
(2, 'Ничего лишнего — только хардкор, только технологии', 'Пообщаться на важные именно для нас темы не только между собой, но и с представителями лучших топовых компаний и проектов в мире PHP — одна из самых главных активностей на конференции. В онлайне это сложно реализовать. Именно поэтому  мы  собираем всех вас вместе 28 июня. Из-за ковидных переносов конференции часть программы  PHP Russia 2021 поменялась. У кого-то из докладчиков изменились планы, и  мы нашли равноценную замену, пришли новые спикеры с неожиданно крутыми темами. В итоге примерно половина докладов были заменены.\r\n\r\nГлобальное отличие от прошлой конференции — гибридный формат: она пройдёт одновременно офлайн и онлайн. Онтико сейчас проводит все конференции. В офлайне будет всё, как обычно: четыре зала, общение всех со всеми, обед и бесконечный кофе-брейк, небольшой фуршет с пивом и соками, афтепати и активности на стендах партнеров. Стенды, кстати, будут прикольные. Все партнеры используют PHP, и с ними будет интересно. А афтепати собирают ребята из московского Beer PHP. \r\n\r\nВ онлайне будут трансляции из всех залов. Плюс можно участвовать в интерактиве с вопросами и ответами. Это плюс-минус обычно. Но мы пошли дальше. В офлайне спикер, как обычно, будет отвечать на вопросы в фойе, собрав вокруг себя кружок, но теперь камера будет  снимать это для онлайн-участников. Они могут присоединиться и тоже задавать вопросы. Это, конечно, не супер полноценное участие, потому что в кулуарах все-таки обсуждается много чего, но уже намного лучше, чем в чатах сидеть.', '2021-06-08 11:22:53', 'php'),
(3, 'Будущее веба: станет ли рендеринг в canvas заменой DOM?', 'В последнее время было немало горестных рассуждений о последствиях решения Google использовать HTML-элемент canvas для рендеринга всего, что видно на экране при работе с Google Docs. И то, что это многих беспокоит, вполне понятно. Когда-то веб был задуман как система для работы с тщательно структурированной информацией, полной осмысленных метаданных и рассчитанной на совместное её использование многими людьми. Но, вместо этого, тот веб, который мы видим сегодня, представляет собой довольно сложно и запутанно устроенные приложения, которые работают в браузерных «песочницах».\r\n\r\nРешение Google, которое заключается в том, чтобы перейти от вывода на страницы HTML-элементов к рисованию пикселей на canvas, нельзя назвать чем-то таким, чего раньше никто не видел и не пробовал. Другие передовые веб-приложения уже вышли далеко за пределы традиционных схем работы с HTML-элементами. Так, в Google Maps вывод данных на canvas используется уже многие годы. В VS Code для отрисовки идеального интерфейса терминала тоже используется canvas. А в подающем надежды наборе инструментов Google Flutter, который позволяет создавать кросс-платформенные интерфейсы, в веб-браузере, по умолчанию, используется рендеринг с использованием canvas.\r\n\r\nНо в этот раз происходящее вызывает несколько иные ощущения. А именно, появляется такое чувство, что рендеринг в canvas и другие современные технологии, вроде WebAssembly, увели нас за точку невозврата. Все привыкли к схеме работы, когда страница загружает, в виде обычного текста, JavaScript-код, который выполняется, взаимодействуя с HTML-элементами, видимыми в «инструментах разработчика». Сейчас возникает такое впечатление, что это — лишь небольшой этап на пути постоянно развивающихся технологий веб-разработки.', '2021-06-08 10:23:59', 'html'),
(4, 'Управление зависимостями в Node.js', 'Управление зависимостями — это часть повседневной работы Node.js-программиста. Сегодня мы поговорим о разных подходах к работе с зависимостями в Node.js, и о том, как система загружает и обрабатывает зависимости.\r\n\r\nПисать Node.js-приложения можно так, чтобы абсолютно весь код, обеспечивающий их функционирование, находился бы в одном .js-файле. Но при такой организации кода не используется модульный подход, когда фрагменты кода оформляют в виде отдельных файлов. Node.js даёт нам чрезвычайно простые механизмы для написания модульного кода.\r\n\r\nПрежде чем мы перейдём к разговору об управлении зависимостями, поговорим о модулях. Что это такое? Зачем разработчику задумываться о неких «фрагментах кода», вместо того, чтобы просто писать весь код в одном файле?', '2021-06-08 09:26:22', 'javascript'),
(5, 'Управление памятью в JavaScript', 'Когда вы кодите на JavaScript, в большинстве случаев вы вполне можете обойтись без знаний о том, как происходит управление памятью. В конце концов, движок JavaScript делает все за вас.\r\n\r\nОднако рано или поздно вы столкнетесь с некоторыми проблемами – например, с утечками памяти, – и избавиться от них получится только тогда, когда вы поймете, как именно работает выделение памяти.\r\n\r\nВ этой статье я расскажу вам об управлении памятью и принципах работы сборщика мусора, а также объясню, как избежать наиболее распространенных видов утечек памяти.', '2021-06-09 19:07:41', 'javascript'),
(6, 'Как ускорить загрузку сайта со стороны бэкенда', 'Скорость загрузки любого сайта складывается из двух составляющих — скорость отдачи страницы бэкендом с загрузкой всех вспомогательных элементов и скорость отрисовки внешней части сайта в браузере клиента.\r\n\r\nЕсли мы говорим о сайтах, написанных на PHP, то скорость генерации страницы при хорошей архитектуре будет 100 мс, но допустима и более медленная загрузка — до 400 мс с последующей оптимизацией кешированием с помощью cache-buster’а, который увеличит скорость до 20-30 мс. С одного домена можно параллельно загружать только шесть файлов. Поэтому файлы нужно не только уменьшать в размере, но и сокращать их количество. Например, элементы дизайна — стрелки, кнопки и прочее — рекомендуется объединять в один файл', '2021-06-09 18:08:28', 'php'),
(7, 'Создаём своё первое приложение на Sapper.js', 'В этой статье будет показан подход к созданию современного приложения с помощью SSR-фреймфорка Sapper.js.\r\n\r\nЧтобы сделать материал понятным для разработчиков с разным уровнем подготовки, в нашем приложении мы не будем использовать TypeScript, HTML-шаблонизатор, кастомные шрифты, не будем писать тесты и даже не станем настраивать линтер.\r\n\r\nКонечно, в современной веб-разработке редкое приложение обходится без этого, и если у читателей возникнет такой интерес, то мы сможем разобрать эти темы в отдельном материале.', '2021-06-10 13:18:53', 'javascript'),
(8, 'Программируем лучше с ESLint, Prettier и TypeScript', 'В этой статье я хочу начать с самого простого и углубляться шаг за шагом. Для начала мы будем использовать простые правила и опции. Потом изучим использование конфигов и плагинов. На протяжении всего процесса вы будете получать полезные советы и информацию, чтобы на выходе создать собственное ESLint и Prettier окружение.', '2021-06-10 18:17:11', 'typescript'),
(9, 'Рефакторинг через классы: вычищаем свой JavaScript-код', 'В небольших React-проектах достаточно эффективно хранить все методы компонентов в самих компонентах. В проектах среднего размера вам может понадобиться сделать из метода компонента вспомогательную функцию. В этом случае можно использовать классы (вместо экспорта отдельных функций и переменных).', '2021-06-11 18:18:06', 'javascript');

-- --------------------------------------------------------

--
-- Структура таблицы `users`
--

CREATE TABLE `users` (
  `Login` varchar(50) NOT NULL,
  `Hashpassword` varchar(60) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Table with users'' credentials';

--
-- Индексы сохранённых таблиц
--

--
-- Индексы таблицы `categories`
--
ALTER TABLE `categories`
  ADD PRIMARY KEY (`name`);

--
-- Индексы таблицы `categorized_news`
--
ALTER TABLE `categorized_news`
  ADD PRIMARY KEY (`news_id`,`cat_name`),
  ADD KEY `cat_name` (`cat_name`);

--
-- Индексы таблицы `groups`
--
ALTER TABLE `groups`
  ADD PRIMARY KEY (`name`);

--
-- Индексы таблицы `news`
--
ALTER TABLE `news`
  ADD PRIMARY KEY (`id`),
  ADD KEY `group_name` (`group_name`);

--
-- Индексы таблицы `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`Login`);

--
-- Ограничения внешнего ключа сохраненных таблиц
--

--
-- Ограничения внешнего ключа таблицы `categorized_news`
--
ALTER TABLE `categorized_news`
  ADD CONSTRAINT `categorized_news_ibfk_1` FOREIGN KEY (`cat_name`) REFERENCES `categories` (`name`) ON DELETE RESTRICT ON UPDATE CASCADE,
  ADD CONSTRAINT `categorized_news_ibfk_2` FOREIGN KEY (`news_id`) REFERENCES `news` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Ограничения внешнего ключа таблицы `news`
--
ALTER TABLE `news`
  ADD CONSTRAINT `news_ibfk_1` FOREIGN KEY (`group_name`) REFERENCES `groups` (`name`) ON DELETE RESTRICT ON UPDATE CASCADE;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
